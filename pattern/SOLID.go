package main

/*
SOLID

S - Single responsibility principle (SRP). Принцип единственной ответственности
pkg/database; pkg/amqp
Разделение проекта на части. Несвязанные логически сервисы не должны зависить друг от друга
Каждый объект - одна обязанность.
Работа с psql -отдельный пакет. Mongo - отдельный пакет. 


O - Open-CLose (OCP). Принцип открытости/закрытости. Добавлять новые функции - можно. Изменять написанные функции - нельзя
Пиши так, чтобы потом это не менять.
Например - достать из базы объект и вернуть его цену. Объектов может быть много. Мы пишем геттеры для объектов, а потом и соответсвтующий интерфейс
И вызываем метод интерфейса


L - Liskov substituion (LSP)Наследники Базового типа должны работать с функциями, созданными под базовый тип.

I - Interface segregation principal (ISP) Принцип разделения интерфейсов. Есть много объектов, которые удовлетворяют конкретному интерфейсу. Когда мы захотим добавить
метод одному из объектов и добавить его в интерфейс - нам придется добавлять этот метод и остальным объектам
Объект не должен зависить от методов, который он не использует

D - Dependency inversion principal (DIP) Принцип инверсии зависимостей. Модули верхних уровней не должны зависить от модулей нижних уровней. Оба типа уровней должны зависеть от абстракций.
А САМИ АБСТРАКЦИИ НЕ ДОЛЖНЫ ЗАВИСИТЬ ОТ ДЕТАЛЕЙ. Функционал не зависит от объекта, а зависит от интерфейса. Чтобы в любой момент можно было поменять объект

*/